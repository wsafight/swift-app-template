//
//  PushNotifications.swift
//  NotifKit (Generated by SwiftyLaunch 2.0)
//  https://docs.swiftylaun.ch/module/notifkit
//

import AnalyticsKit
import Foundation
import OneSignalFramework
import SharedKit

public class PushNotifications {

	public init() {

	}

	// Call this function to ask for the permission to deliver notifications
	// BECAUSE we can only show the system notification prompt ONCE, we decided to do it another way
	// First show a custom in-app prompt, then if the user accepts, show the system prompt
	// This way, even if the user doesn't want to receive notifications at the moment, we can prompt him again.
	// So, better call the function showNotificationsPermissionsSheet() from
	// showNotificationsPermissionSheetIfNeeded.swift to soft-prompt
	@MainActor
	static public func askSystemPermission() async {

		/// This method is called when user presses on "Allow Notifications" in the notifications permission sheet.
		/// The sheet includes information about ToS and privacy policy, so by pressing on Allow, the user agrees to them.
		PushNotifications.oneSignalConsentGiven()

		if PushNotifications.canAskForNotificationsPermission() {
			OneSignal.Notifications.requestPermission(
				{ accepted in
					print("[NOTIFKIT][INFO] User accepted notifications: \(accepted)")
				}, fallbackToSettings: true)  //false because we can directly open the settings. OneSignal will first show an alert to open the settings
		} else {
			if let url = URL(string: UIApplication.openNotificationSettingsURLString) {
				// Ask the system to open that URL.
				await UIApplication.shared.open(url)
			}
		}

	}

	/// Will return whether the user has given permission to receive notifications
	static public func hasNotificationsPermission() async -> Bool {
		return OneSignal.Notifications.permission
	}

	/// Can the App show the system prompt for notifications permission? (Can only be shown once)
	static public func canAskForNotificationsPermission() -> Bool {
		return OneSignal.Notifications.canRequestPermission
	}

	/// Call this if we have received the user's consent to send them notifications (done through the in-app prompt called via showNotificationsPermissionsSheet())
	/// https://documentation.onesignal.com/docs/mobile-sdk#get-user-consent-for-data-collection
	static public func oneSignalConsentGiven() {
		OneSignal.setConsentGiven(true)
	}

	/// Remove all notifications from the notification center (is called when the app is opened)
	static public func clearAllAppNotifications() {
		OneSignal.Notifications.clearAll()
	}
}

/// SDK Initialization
extension PushNotifications {

	// We dont do this inside init of PushNotifications because we want to call it from the application delegate's
	// didFinishLaunchingWithOptions method, in order to pass the launch options params.
	// Is only used once in App.swift to initialize OneSignal
	public static func initOneSignal(_ appLaunchOptions: [UIApplication.LaunchOptionsKey: Any]? = nil) {

		guard let appID = try? getPlistEntry("ONESIGNAL_APP_ID", in: "OneSignal-Info"), !appID.isEmpty else {
			fatalError("ERROR: Couldn't find ONESIGNAL_APP_ID in OneSignal-Info.plist!")
		}

		// Remove this method to stop OneSignal Debugging
		OneSignal.Debug.setLogLevel(.LL_ERROR)

		// https://documentation.onesignal.com/docs/mobile-sdk#opting-into-data-privacy-protections
		// User's conset will be counted as granted when they create an account OR opt in for notifications
		// Make sure to add it to your privacy policy.
		OneSignal.setConsentRequired(true)

		// OneSignal initialization
		OneSignal.initialize(appID, withLaunchOptions: appLaunchOptions)
	}

	/// Allows us to connect a user with our Firebase Auth UID
	static public func associateUserWithID(_ id: String) {
		OneSignal.login(id)
		Analytics.capture(
			.info, id: "connected_user_between_auth_and_onesignal",
			longDescription: "[NOTIF<>AUTH] Connected Auth and OneSignal for User with ID \(id).",
			source: .notif)
	}

	/// Disconnects OneSignal ID from Firebase Auth UID
	static public func removeUserIDAssociation() {
		OneSignal.logout()
	}

}
