//
//  Analytics.swift
//  AnalyticsKit (Generated by SwiftyLaunch 2.0)
//  https://docs.swiftylaun.ch/module/analyticskit
//
//  Use the Analytics class in order to track app events and errors.
//  You don't have to keep it stateful, simply use it by calling Analytics.ANALYTICS_METHOD
//

import Foundation
import PostHog
import SharedKit

/// Defines the type of the event.
///
/// The event type will be prefixed before every outgoing event.
public enum EventType: String {
	case error = "error"
	case info = "info"
	case success = "success"
}

/// Defines the relevancy of an event.
///
/// All events have medium relevancy by default, except 'error', which has a
/// high relevancy by default.
public enum EventRelevancy: String {
	case low = "low"
	case medium = "medium"
	case high = "high"
}

/// Defines the event source, or the "category" of the event
///
/// SwiftyLaunch has created the most common event sources for its modules, but
/// don't be afraid to extend this enum.
public enum EventSource: String {
	/// Catch-all event source for events don't fit into any other category. Be sure to create a distinct source where needed
	case general = "general"

	/// For events that are related to AuthKit / Firebase Auth
	case auth = "auth"

	/// For events that are related to DB interactions / Firebase Firestore
	case db = "db"

	/// Only for app crash events -- Crashlytics & PostHog
	case crash = "crash"

	/// For events that are related to In-App Purchases / RevenueCat
	case iap = "iap"

	/// For events that are related to Push Notifications / OneSignal
	case notif = "notif"

	/// For events that are related to AdsKit / Google AdMob
	case adsKit = "adskit"

	/// For events that are related to AnalyticsKit itself / PostHog
	case analytics = "analytics"
}

/// Wrapper around the PostHogSDK
public class Analytics {

	/// Capture an event and send it to PostHog.
	/// https://docs.swiftylaun.ch/module/analyticskit/track-events-and-errors
	///
	/// A wrapper of the "flexible" version that takes in raw input and sends it to PostHog.
	static public func capture(
		_ eventType: EventType,
		id: String,
		longDescription: String? = nil,
		source: EventSource,
		fromView: String? = nil,
		relevancy: EventRelevancy? = nil
	) {
		// To get an overview of what's being captured, we print it into the console
		print(
			"[ANALYTICS] Captured \(eventType.rawValue) event '\(id)' of type '\(source.rawValue)': \(longDescription ?? "No description")"
		)

		var properties: [String: Any] = [
			"relevancy": relevancy != nil
				? relevancy!.rawValue
				: eventType == .error ? EventRelevancy.high.rawValue : EventRelevancy.medium.rawValue,
			"source": source.rawValue,
		]

		if let longDescription = longDescription {
			properties["long_description"] = longDescription
		}

		// If we also pass from which view that event was captured, we want to attach the value to the internal
		// PostHog Property called $screen_name. (Events properties with '$' prefix are usually automatically set by PostHog)
		if let fromView = fromView {
			properties["$screen_name"] = fromView
		}

		Analytics.captureEvent("\(eventType.rawValue)_\(id)", properties: properties)
	}

	/// Capture an event and send it to PostHog.
	/// https://docs.swiftylaun.ch/module/analyticskit/track-events-and-errors#flexbile-captureevent-function
	///
	/// A more "raw" version of the function above that allows for greater flexibility. You will probably want to use the function above
	static public func captureEvent(_ event: String, properties: [String: Any]?) {
		var propertiesToSend = properties ?? [:]
		// additionally attach the source of the event, because we will also capture events from the backend (source will be "backend")
		propertiesToSend["endpoint_source"] = "app"
		PostHogSDK.shared.capture(event, properties: propertiesToSend)
	}

	/// Is called from the .captureTaps() view modifier (https://docs.swiftylaun.ch/module/analyticskit/capture-taps) , but we
	/// can also manually send these events with this function.
	static public func captureTap(
		_ tapTargetId: String,
		fromView screenName: String?,
		relevancy: EventRelevancy = .medium
	) {
		print("[ANALYTICS] Captured tap on \(tapTargetId)")

		var properties: [String: Any] = [:]
		properties["relevancy"] = relevancy.rawValue
		if let screenName = screenName {
			properties["$screen_name"] = screenName
		}

		Analytics.captureEvent("user_tapped_on_\(tapTargetId)", properties: properties)
	}
}

// MARK: - Only for App.swift
extension Analytics {

	// We don't do this inside init of Analytics because we never initialize the Analytics object.
	// Is only used once in App.swift to initialize PostHog.
	static public func initPostHog() {

		guard let apiKey = try? getPlistEntry("POSTHOG_API_KEY", in: "PostHog-Info"), !apiKey.isEmpty else {
			fatalError("ERROR: Couldn't find POSTHOG_API_KEY in PostHog-Info.plist!")
		}

		guard let host = try? getPlistEntry("POSTHOG_HOST", in: "PostHog-Info"), !host.isEmpty else {
			fatalError("ERROR: Couldn't find POSTHOG_HOST in PostHog-Info.plist!")
		}

		let config = PostHogConfig(apiKey: apiKey, host: host)

		// Doesn't work well with SwiftUI. We'll manually track screen views via the .captureViewActivity() Modifier
		config.captureScreenViews = false

		// EXPERIMENTAL SESSION REPLAYS:
		// SwiftyLaunch Docs: https://docs.swiftylaun.ch/module/analyticskit/session-recordings
		// PostHog Docs: https://posthog.com/docs/session-replay/mobile
		config.sessionReplay = true
		config.sessionReplayConfig.screenshotMode = true
		config.sessionReplayConfig.maskAllImages = false
		config.sessionReplayConfig.maskAllTextInputs = false

		// Note: MAKE SURE TO PROPERLY MASK SENSITIVE INFORMATION!

		PostHogSDK.shared.setup(config)
	}

	/// Allows us to connect a user with our Firebase Auth UID
	/// https://docs.swiftylaun.ch/module/analyticskit#actions-when-user-signes-in-or-out-only-with-firebasekit
	static public func associateUserWithID(_ id: String, userProperties: [String: Any]) {
		PostHogSDK.shared.identify(id, userProperties: userProperties)
		Analytics.capture(
			.info,
			id: "connected_user_between_auth_and_posthog",
			longDescription: "[ANALYTICS<>AUTH] Connected Auth and PostHog for User with ID \(id).",
			source: .analytics
		)
	}

	/// Disconnects PostHog ID from Firebase Auth UID
	static public func removeUserIDAssociation() {
		PostHogSDK.shared.reset()
	}

}
