//
//  requireLogin.swift
//  FirebaseKit (Generated by SwiftyLaunch 2.0)
//  https://docs.swiftylaun.ch/module/authkit/lock-views-behind-auth
//

import SharedKit
import SwiftUI

extension View {
	/// This modifier makes sure that the view that it is applied to will only be shown if the user is logged in.
	/// - Parameters:
	///   - db: Pass the state of the Database.
	///   - navTitle (optional): The title of the navigation bar when the user is prompted to sign in.
	///   - onCancel: A button will be shown in the top left corner, that will let the user close the Sign In. Use this to close the View that requires the user to be logged in.
	public func requireLogin(
		db: DB,
		navTitle: LocalizedStringKey = "",
		onCancel: @escaping () -> Void
	) -> some View {
		modifier(
			RequireLoginViewModifier(
				db: db,
				navTitle: navTitle,
				onCancel: onCancel
			)
		)
	}
}

struct RequireLoginViewModifier: ViewModifier {

	@ObservedObject var db: DB
	@State var showSheet: Bool

	// NavTitle for the user to understand what is behind the Login View (For Example, Account Info)
	let navTitle: LocalizedStringKey
	let onCancel: () -> Void

	init(
		db: DB,
		navTitle: LocalizedStringKey,
		onCancel: @escaping () -> Void
	) {
		self.db = db
		self.showSheet = db.authState != .signedIn
		self.navTitle = navTitle
		self.onCancel = onCancel
	}

	func body(content: Content) -> some View {

		// User MUST be logged in and email verified to see the content
		// Email Verification via Sign in with Apple is automatic, but if the user signs in with email and password, they need to verify their email
		Group {
			if db.authState == .signedIn {
				content
			} else {
				// Why do we show the SignInView as a sheet and not simply put it here instead of the VStack with the hero view?
				// It's because SignInView uses NavigationStack in its implementation.
				// If we show the SignInView directly instead of content if the user is not logged in, it may lead to
				// nested NavigationStacks (if the modifier is applied to a view inside of a NavigationStack), which
				// will lead to errors in SwiftUI. Thats why we show an "Account Required" View and show the SignInView through a sheet,
				// as SwiftUI has no problem if another NavigationStack appears within a sheet.
				//
				// -> Doesn't work:
				// NavigationStack {
				//   NavigationStack {
				//     ...
				//   }
				// }
				//
				// -> Works:
				// NavigationStack {
				//   SomeView {
				//     ...
				//   }
				//   .sheet() {
				//      NavigationStack {
				//          ...
				//      }
				//   }
				// }
				//
				VStack {
					HeroView(
						sfSymbolName: "person.circle", title: "Account Required.",
						subtitle: "You must be signed in to view this content."
					)
					.padding(.top, -10)
					Button("Sign In") {
						showSheet = true
					}
					.padding(.top, 10)
				}
			}
		}
		.sheet(isPresented: $showSheet) {
			SignInView(
				db: db,
				navTitle: navTitle,
				onSignedIn: {
					showSheet = false
				},
				onCanceled: {
					showSheet = false
					Task {
						try? await Task.sleep(for: .seconds(0.15))
						onCancel()
					}
				}
			)
			.interactiveDismissDisabled()
		}
	}
}
