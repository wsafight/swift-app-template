//
//  BackendFunctions.swift
//  BackendKit (Generated by SwiftyLaunch 2.0)
//  https://docs.swiftylaun.ch/module/backendkit
//

import AnalyticsKit
import FirebaseFunctions
import Foundation
import SharedKit

public struct FetchedUser: Codable {
	let userID: String
	let username: String
	let postsCreated: Int
	let userHasPremium: Bool

	init(from rawData: [String: Any]) throws {
		guard JSONSerialization.isValidJSONObject(rawData),
			let data = try? JSONSerialization.data(withJSONObject: rawData),
			let decodedResults = try? JSONDecoder().decode(Self.self, from: data)
		else {
			throw NSError(domain: "Invalid Init Object", code: 0, userInfo: nil)
		}
		self = decodedResults
	}
}

// MARK: - Backend Functions Examples
extension DB {

	public func fetchAllBackendUsers() async -> [FetchedUser] {
		Analytics.capture(.info, id: "fetch_all_backend_users_called", source: .db)
		do {
			let data = try await functions.httpsCallable("fetchAllUsers").call()

			guard let usersRaw = data.data as? [[String: Any]] else {
				Analytics.capture(
					.error, id: "fetch_all_backend_users",
					longDescription: "Data Mismatch: data is not an array.", source: .db)
				showInAppNotification(
					.error,
					content: .init(title: "Server Error", message: "Error casting Server Data to App Data"))
				return []
			}

			let users = usersRaw.map({ try? FetchedUser(from: $0) })

			//Check if all of them are valid
			guard let fetchedUsers = users as? [FetchedUser] else {
				Analytics.capture(
					.error, id: "fetch_all_backend_users",
					longDescription: "Data Mismatch: couldn't map to user object.", source: .db)
				showInAppNotification(
					.error,
					content: .init(title: "Server Error", message: "Error casting Server Data to App Data"))
				return []
			}

			Analytics.capture(
				.success, id: "fetch_all_backend_users", longDescription: "Fetched \(fetchedUsers.count)",
				source: .db)
			return fetchedUsers
		} catch {
			debugPrint(error)
			Analytics.capture(
				.error, id: "fetch_all_backend_users",
				longDescription: "Error fetching users: \(error.localizedDescription)", source: .db)
			showInAppNotification(
				.error, content: .init(title: "Server Error", message: "Error fetching Users from the Database"))
			return []
		}
	}

	public func sendNotificationTo(userID: String, message: String) async {
		Analytics.capture(.info, id: "send_notification_to_called", longDescription: "To: \(userID)", source: .notif)
		do {
			var contentDict: [String: Any] = ["userID": userID]
			contentDict["message"] = message
			let _ = try await functions.httpsCallable("sendNotificationTo").call(contentDict)
		} catch {
			Analytics.capture(
				.error, id: "send_notification_to",
				longDescription: "Error sending notification: \(error.localizedDescription)", source: .notif)
			showInAppNotification(
				.error, content: .init(title: "Server Error", message: "Error Sending Notification to User"))
		}
	}

}

/// Will convert a JSON ISO String to a Date object, Refer to the Backend Code.
private func convertJSONISOStringToDate(_ isoString: String) -> Date? {
	let dateFormatter = DateFormatter()
	dateFormatter.dateFormat = "yyyy-MM-dd'T'HH:mm:ss.SSSZ"
	dateFormatter.locale = Locale.current  // Setting to current user's locale
	return dateFormatter.date(from: isoString)
}
