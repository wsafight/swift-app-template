//
//  VerifyEmailView.swift
//  FirebaseKit (Generated by SwiftyLaunch 2.0)
//  https://docs.swiftylaun.ch/module/authkit/email-sign-in-flow#account-creation--email-verification
//

import AnalyticsKit
import AuthenticationServices
import SharedKit
import SwiftUI

struct VerifyEmailView: View {

	@Environment(\.scenePhase) var scenePhase
	@EnvironmentObject var db: DB
	@StateObject var verificationTimer = VerificationTimer()

	public var body: some View {

		// This view will only be shown when the user is logged in but email is not verified
		// This is for edge cases where the view might be shown, even though the user is not logged in
		if let user = db.currentUser, let email = user.email {
			VStack {
				Spacer()
				HeroView(
					sfSymbolName: "envelope.badge",
					title: "Check your Inbox.",
					subtitle: "An email with a verification link\nwas sent to \(email)")
				Spacer()
				Button(
					"Resend Verification Email\(verificationTimer.secondsLeft > 0 ? " (\(verificationTimer.secondsLeft))" : "")"
				) {
					verificationTimer.startCountdown()
					Task {
						await tryFunctionOtherwiseShowInAppNotification(
							fallbackNotificationContent: .init(
								title: "Couldn't Send Verification Email",
								message: "Try Again Later")
						) {
							try await db.sendVerificationEmail()
							showInAppNotification(
								.success,
								content: .init(
									title: "Verification Email Sent",
									message: "Check your Inbox"), size: .compact)
						}
					}
				}
				.buttonStyle(.cta())
				.disabled(verificationTimer.secondsLeft > 0)
				.captureTaps("resend_verif_email_btn", fromView: "VerifyEmailView")

				Button("Sign Out") {
					tryFunctionOtherwiseShowInAppNotification(
						fallbackNotificationContent: .init(
							title: "Sign Out Error", message: "Try Again Later")
					) {
						try db.signOut()
					}
				}
				.buttonStyle(.secondary())
				.captureTaps("sign_out_btn", fromView: "VerifyEmailView")
			}
			.padding()
			.navigationTitle("Email Verification")
			.navigationBarTitleDisplayMode(.inline)
			.onChange(of: scenePhase) {
				if scenePhase == .active {
					Task {
						await db.refreshUserData()
					}
				}
			}
			.captureViewActivity(as: "VerifyEmailView")
		} else {
			VStack {

				Spacer()

				Text("Invalid State: Not logged in.")

				Spacer()

				if let _ = db.currentUser {
					Button("Sign Out") {
						tryFunctionOtherwiseShowInAppNotification(
							fallbackNotificationContent: .init(
								title: "Sign Out Error", message: "Try Again Later")
						) {
							try db.signOut()
						}
					}
					.buttonStyle(.secondary())
					.captureTaps("sign_out_btn", fromView: "VerifyEmailView")
				}
			}
			.padding()
			.captureViewActivity(as: "Incorrect: VerifyEmailView (Not Logged In)")
		}
	}
}

class VerificationTimer: ObservableObject {
	@Published var secondsLeft = 0
	var timer = Timer()

	func startCountdown() {
		self.secondsLeft = 60
		timer = Timer.scheduledTimer(withTimeInterval: 1.0, repeats: true) { _ in
			self.secondsLeft -= 1
			if self.secondsLeft == 0 {
				self.timer.invalidate()
			}
		}
	}
}

#Preview {
	NavigationStack {
		VerifyEmailView()
			.environmentObject(DB())
	}
}
