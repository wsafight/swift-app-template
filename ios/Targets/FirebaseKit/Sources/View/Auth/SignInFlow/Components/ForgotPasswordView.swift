//
//  ForgotPasswordView.swift
//  FirebaseKit (Generated by SwiftyLaunch 2.0)
//  https://docs.swiftylaun.ch/module/authkit/email-sign-in-flow#password-reset--forgot-password
//

import AnalyticsKit
import SharedKit
import SwiftUI

struct ForgotPasswordView: View {

	@EnvironmentObject var db: DB

	/// Optional: Action that will go back to the previous screen
	let goBack: (() -> Void)?

	/// Optional: pre-fill the email field
	@State var email: String

	init(email: String = "", goBack: (() -> Void)? = nil) {
		self.email = email
		self.goBack = goBack
	}

	//Keep track of the active keyboard
	@FocusState private var textfieldFocused: Bool

	//True when forgot password email is sent (disables button and textfield)
	@State private var emailSent = false

	public var body: some View {

		VStack {
			Spacer()
			HeroView(
				sfSymbolName: emailSent ? "envelope.badge" : "person.crop.circle.badge.questionmark",
				title: emailSent ? "Check your Inbox." : "Lost Access?",
				subtitle: emailSent
					? "We sent a password reset\nlink to \(email)"
					: "You can request an email to reset\nyour account password.")
			Spacer()

			TextField("Your Account Email", text: $email)
				.textFieldStyle(CommonTextField(disabled: emailSent))
				.textInputAutocapitalization(.never)
				.textContentType(.emailAddress)
				.focused($textfieldFocused, equals: true)
				.onSubmit { textfieldFocused = false }

			Button(emailSent ? "Request Sent" : "Send Request") {
				if email.validate(.email) != nil {
					showInAppNotification(
						.error, content: .init(title: "Validation Error", message: "Enter a valid Email"),
						size: .compact)
					return
				}

				Task {
					emailSent = true
					await tryFunctionOtherwiseShowInAppNotification(
						fallbackNotificationContent: .init(
							title: "Couldn't send Password Reset Email", message: "Try again later")
					) {
						try await db.requestPasswordReset(email: email)
						showInAppNotification(
							.success,
							content: .init(
								title: "Sent Password Reset Email", message: "to \(email)"),
							size: .compact)
					}
				}
			}
			.buttonStyle(.cta())
			.captureTaps("forgot_pwd_reset_email_req_btn", fromView: "ForgotPasswordView")
			.disabled(emailSent)

			if let goBack {
				Button("Go Back", action: goBack)
					.buttonStyle(.secondary())
			}
		}
		.padding()
		.navigationTitle("Forgot Password")
		.navigationBarTitleDisplayMode(.inline)
		.captureViewActivity(as: "ForgotPasswordView")
	}
}

#Preview {
	NavigationStack {
		ForgotPasswordView(goBack: {})
			.environmentObject(DB())
	}
}
