//
//  requirePremium.swift
//  InAppPurchaseKit (Generated by SwiftyLaunch 2.0)
//  https://docs.swiftylaun.ch/module/inapppurchasekit/lock-views-behind-paywall
//

import SharedKit
import SwiftUI

extension View {

	/// This modifier makes sure that the view that it is applied to will only be shown if the user has premium access
	/// - Parameters:
	///   - iap: Pass the state of the InAppPurchases Model.
	///   - onCancel: A button will be shown in the top left corner, that will let the user close the InAppPurchaseView. Use this to close the View that requires the user to have premium.
	public func requirePremium(iap: InAppPurchases, onCancel: @escaping () -> Void = {}) -> some View {
		modifier(RequirePremiumModifier(iap: iap, onCancel: onCancel))
	}
}

private struct RequirePremiumModifier: ViewModifier {

	@ObservedObject var iap: InAppPurchases

	/// This closure will be called when the user cancels the purchase process
	let onCancel: () -> Void

	@State private var showSheet = true

	func body(content: Content) -> some View {

		// Give access to content only if the user is subscribed (or for Dev. and the view is shown in a SwiftUI preview)
		if iap.subscriptionState == .subscribed || isPreview {
			content
		} else {
			// A view that is rendered instead of the content, on which the sheet is shown
			// (maybe there is sensitive information that should not be visible to the user without a subscription)
			// And a simple sheet wouldn't be enough to prevent the user from seeing the content
			VStack {
				HeroView(
					sfSymbolName: "star.fill", title: "Premium Required",
					subtitle: "You must have Premium to access this content."
				)
				.padding(.top, -10)
				Button("Purchase Premium") {
					showSheet = true
				}
				.padding(.top, 10)
			}
			.sheet(isPresented: $showSheet) {
				InAppPurchaseView(
					paywallHeroTitle: "Get Access with Premium.",
					onCanceled: {
						showSheet = false
						onCancel()
					},
					onComplete: {
						// User subscribed -> hide sheet. This will also update subscriptionState, so the content will be shown
						showSheet = false
					}
				)
				.interactiveDismissDisabled()
			}
		}
	}
}
