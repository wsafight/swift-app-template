//
//  WebView.swift
//  SharedKit (Generated by SwiftyLaunch 2.0)
//  https://docs.swiftylaun.ch/module/sharedkit/views/web-view
//

import SwiftUI
import WebKit

/// Show WebKit View in SwiftUI
public struct WebView: UIViewRepresentable {

	let url: URL

	public init(url: URL) { self.url = url }

	public func makeUIView(context: Context) -> WKWebView {
		let prefs: WKWebpagePreferences = WKWebpagePreferences()
		prefs.allowsContentJavaScript = true

		let config: WKWebViewConfiguration = WKWebViewConfiguration()
		config.defaultWebpagePreferences = prefs

		return WKWebView(frame: .zero, configuration: config)
	}

	public func updateUIView(_ uiView: WKWebView, context: Context) {
		let request = URLRequest(url: url)
		uiView.load(request)
	}
}

extension View {

	/// Same as `sheet`, but shows a WebView
	public func webViewSheet(_ showSheet: Binding<Bool>, url: URL, title: LocalizedStringKey) -> some View {
		modifier(WebViewSheetModifier(showSheet: showSheet, url: url, title: title))
	}
}

private struct WebViewSheetModifier: ViewModifier {

	@Binding var showSheet: Bool
	let url: URL
	let title: LocalizedStringKey

	func body(content: Content) -> some View {
		content
			.sheet(isPresented: $showSheet) {
				NavigationStack {
					WebView(url: url)
						.navigationTitle(title)
						.navigationBarTitleDisplayMode(.inline)
						.toolbar {
							ToolbarItem(placement: .cancellationAction) {
								Button(
									"Dismiss",
									action: {
										showSheet = false
									})
							}
						}
				}
			}

	}
}

private struct PreviewView: View {
	@State var showWebView = true
	var body: some View {
		Button("Show WebView") {
			showWebView.toggle()
		}
		.webViewSheet($showWebView, url: URL(string: "https://www.apple.com")!, title: "Apple Website")
	}
}

#Preview {
	PreviewView()
}
