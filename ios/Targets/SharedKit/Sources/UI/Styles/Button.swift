//
//  Button.swift
//  SharedKit (Generated by SwiftyLaunch 2.0)
//  https://docs.swiftylaun.ch/module/sharedkit/ui/button-styles
//

import SwiftUI

let commonButtonRadius = 10.0
let commonButtonHeight = 50.0
let commonButtonFontStyle: Font = .title3.weight(.semibold)

public struct CTAButtonStyle: ButtonStyle {

	public init() {}

	public func makeBody(configuration: Configuration) -> some View {
		configuration.label
			.font(commonButtonFontStyle)
			.frame(height: commonButtonHeight)
			.frame(maxWidth: .infinity)
			.foregroundStyle(Color.white)
			.background(
				(configuration.role == .destructive || configuration.role == .cancel) ? Color.red : Color.accent
			)
			.clipShape(RoundedRectangle(cornerRadius: commonButtonRadius, style: .continuous))
			.scaleEffect(configuration.isPressed ? 0.975 : 1.0)
			.animation(.interactiveSpring, value: configuration.isPressed)
			.hoverEffect()
	}
}

extension ButtonStyle where Self == CTAButtonStyle {
	/// Call-To-Action Button Style is usually used for primary action for the current state of the app.
	/// It is recommended to not have more than 1 CTA button per screen.
	public static func cta() -> Self {
		CTAButtonStyle()
	}
}

public struct SecondaryButtonStyle: ButtonStyle {

	@Environment(\.colorScheme) private var colorScheme

	public init() {}

	public func makeBody(configuration: Configuration) -> some View {
		configuration.label
			.font(commonButtonFontStyle)
			.frame(height: commonButtonHeight)
			.frame(maxWidth: .infinity)
			.foregroundStyle(
				(configuration.role == .destructive || configuration.role == .cancel) ? Color.red : Color.accent
			)
			.background(.quinary)
			.clipShape(RoundedRectangle(cornerRadius: commonButtonRadius, style: .continuous))
			.overlay(
				RoundedRectangle(cornerRadius: commonButtonRadius)
					.strokeBorder(.quaternary, lineWidth: 0.5)
			)
			.scaleEffect(configuration.isPressed ? 0.975 : 1.0)
			.animation(.interactiveSpring, value: configuration.isPressed)
			.hoverEffect()
	}
}

extension ButtonStyle where Self == SecondaryButtonStyle {
	/// Secondary Button Style is usually used in addition to the CTA Button,
	/// symbolising the action that the user should be "less tempted" to press
	public static func secondary() -> Self {
		SecondaryButtonStyle()
	}
}

#Preview {
	VStack(spacing: 20) {
		VStack {
			Button("CTA Button") {}
				.buttonStyle(.cta())

			Button("Destructive CTA Button", role: .destructive) {}
				.buttonStyle(.cta())
		}
		VStack {
			Button("Secondary Button") {}
				.buttonStyle(.secondary())

			Button("Destructive Secondary Button", role: .destructive) {}
				.buttonStyle(.secondary())
		}
	}
	.padding()
}
